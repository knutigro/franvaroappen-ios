//
//  RatingManagerTests.swift
//  FranvaroAppen
//
//  Created by Knut Inge Grosland on 2017-04-05.
//  Copyright Â© 2017 Knut Inge Grosland. All rights reserved.
//

import XCTest
@testable import FranvaroAppen

class RatingManagerTests: XCTestCase {
    
    override func setUp() {
        super.setUp()
        // Put setup code here. This method is called before the invocation of each test method in the class.
        RatingManager.resetTracking()
        RatingManager.daysUntilPromt = 0
        RatingManager.usesUntilPromt = 0
        RatingManager.significantEventsUntilPrompt = 0
    }
    
    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
        RatingManager.resetTracking()
        super.tearDown()
    }
    
    // Days
    func testDaysUntilPromtNotAccomplished() {
        RatingManager.daysUntilPromt = 3
        RatingManager.appLaunched()
        XCTAssertFalse(RatingManager.shouldRequestReview)
    }

    func testDaysUntilPromtAccomplished() {
        let threeDaysAgo = Date().timeIntervalSince1970 - (60 * 60 * 24 * 3)
        UserDefaults.standard.set(threeDaysAgo, forKey: kFirstUseDate)
        RatingManager.daysUntilPromt = 3
        RatingManager.appLaunched()
        XCTAssertTrue(RatingManager.shouldRequestReview)
    }
    
    // Significant events
    func testSigificantEventsUntilPromtNotAccomplished() {
        RatingManager.significantEventsUntilPrompt = 3
        RatingManager.appLaunched()
        XCTAssertFalse(RatingManager.shouldRequestReview)
    }

    func testSigificantEventsUntilPromtAccomplished() {
        RatingManager.significantEventsUntilPrompt = 3
        RatingManager.appLaunched()
        RatingManager.userDidSignificantEvent()
        RatingManager.userDidSignificantEvent()
        RatingManager.userDidSignificantEvent()
        XCTAssertEqual(RatingManager.significantEventsUntilPrompt, RatingManager.significantEventCount)
        XCTAssertTrue(RatingManager.shouldRequestReview)
        RatingManager.userDidSignificantEvent()
        XCTAssertTrue(RatingManager.shouldRequestReview)
    }

    // Number of uses
    func testUsesUntilPromtNotAccomplished() {
        RatingManager.usesUntilPromt = 3
        RatingManager.appLaunched()
        XCTAssertFalse(RatingManager.shouldRequestReview)
    }
    
    func testUsesUntilPromtAccomplished() {
        RatingManager.usesUntilPromt = 3
        RatingManager.appLaunched()
        RatingManager.appLaunched()
        RatingManager.appLaunched()
        XCTAssertEqual(RatingManager.usesUntilPromt, RatingManager.useCount)
        XCTAssertTrue(RatingManager.shouldRequestReview)
        RatingManager.appLaunched()
        XCTAssertTrue(RatingManager.shouldRequestReview)
    }
    
    func testNewVersionReset() {
        RatingManager.usesUntilPromt = 3
        RatingManager.appLaunched()
        RatingManager.appLaunched()
        RatingManager.appLaunched()
        XCTAssertEqual(RatingManager.usesUntilPromt, RatingManager.useCount)
        XCTAssertTrue(RatingManager.shouldRequestReview)
        
        UserDefaults.standard.set("1.222.23", forKey: kCurrentVersion)
        RatingManager.appLaunched()
        XCTAssertEqual(RatingManager.useCount, 0)
        XCTAssertFalse(RatingManager.shouldRequestReview)
    }
    
    func testIfOnlyPromtingUserOnce() {
        RatingManager.shouldPromtOnlyOncePerVersion = true
        RatingManager.appLaunched()
        XCTAssertTrue(RatingManager.shouldRequestReview)
        RatingManager.requestReview()
        XCTAssertFalse(RatingManager.shouldRequestReview)
    }
}
